#‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏£‡∏ß‡∏°‡πÇ‡∏°‡∏î‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ Library
from linepy import *
from datetime import datetime
from liff.ttypes import LiffChatContext, LiffContext, LiffSquareChatContext, LiffNoneContext, LiffViewRequest
import time, sys, os, akad, json, re, ast, pytz, requests
import threading
import random
import qrcode

#‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ö‡∏≠‡∏ó
appName = "DESKTOPMAC\t9.2.0\tMAC\t12.6"
line = LINE('‡πÉ‡∏™‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πå', '‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πå', appName=appName)
token = line.authToken
print(f"‡πÇ‡∏ó‡πÄ‡∏Ñ‡πà‡∏ô {token}") 

#‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ
creator = ['uc7deef31bd21ce96d4ec90b3b6856053']
lineMID = line.getProfile().mid
lineProfile = line.getProfile()
botshi = OEPoll(line)

def bcTemplate(gr, data): #‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡πà‡∏≤‡∏ôapi
    teambotmax1 = LiffChatContext(gr)
    teambotmax2 = LiffContext(chat=teambotmax1)
    teambotmax3 = LiffViewRequest("‡πÉ‡∏™‡πà‡∏•‡∏¥‡∏ü‡πÑ‡∏≠‡∏î‡∏µ‡∏Ç‡∏≠‡∏á‡∏≠‡∏±‡∏ô‡πÑ‡∏´‡∏ô‡∏Å‡πá‡πÑ‡∏î‡πâ", teambotmax2)
    token = line.liff.issueLiffView(teambotmax3)
    url = 'https://api.line.me/message/v3/share'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer %s' % token.accessToken
    }
    data = {"messages":[data]}
    requests.post(url, headers=headers, data=json.dumps(data))

def shido15(to, text): #‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° FLEX ‡πÑ‡∏•‡∏ô‡πå
    true = True
    data = {
        "type": "flex",
        "altText": "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡∏¥‡πÇ‡∏î‡πâ  ï ‚Ä¢·¥•‚Ä¢ î",
        "contents": {
            "type": "carousel",
            "contents": [
                {
                    "type": "bubble",
                    "hero": {
                        "type": "image",
                        "size": "full",
                        "aspectRatio": "21:21",
                        "aspectMode": "cover",
                        "url": "https://img2.pic.in.th/pic/1709219692698-ezgif.com-gif-to-apng-converter.png",
                        "animated": true
                    },
                    "body": {
                        "type": "box",
                        "layout": "vertical",
                        "spacing": "sm",
                        "contents": [
                            {
                                "type": "text",
                                "text": "üê•SHIDOüê•",
                                "wrap": true,
                                "weight": "bold",
                                "size": "xl",
                                "color": "#FFFFFF",
                                "align": "center"
                            },
                            {
                                "type": "text",
                                "text": text,
                                "color": "#66CCFF",
                                "weight": "bold",
                                "size": "md",  # ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                                "align": "center",
                                "wrap": true  # ‡πÉ‡∏´‡πâ wrap ‡πÄ‡∏õ‡πá‡∏ô true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà
                            },
                            {
                                "type": "box",
                                "layout": "vertical",
                                "contents": [
                                    {
                                        "type": "button",
                                        "color": "#FF1493",
                                        "style": "primary",
                                        "action": {
                                            "type": "clipboard",
                                            "label": "‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°",
                                            "clipboardText": text,
                                        }
                                    }
                                ]
                            }
                        ]
                    },
                    "styles": {
                        "body": {
                            "backgroundColor": "#000000"
                        }
                    }
                }
            ]
        }
    }
    bcTemplate(to, data)                  
    time.sleep(1)

#‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ö‡∏≠‡∏ó
def DevBOTSHI(op):
    global msg
    try:
    	
        if op.type == 25 or op.type == 26: #op.type 25 ‡∏Ñ‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏™‡πà‡∏á 26‡∏Ñ‡∏∑‡∏≠ ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏™‡πà‡∏á‡∏°‡∏≤
            msg = op.message #‡∏Ñ‡∏∑‡∏≠‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏•‡∏ô‡πå‡∏™‡πà‡∏á‡∏°‡∏≤
            to = msg.to #to ‡∏Ñ‡∏∑‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á
            sender = msg._from #sender ‡∏Ñ‡∏∑‡∏≠‡πÑ‡∏≠‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
            msg_id = msg.id #msg_id ‡∏Ñ‡∏∑‡∏≠‡πÑ‡∏≠‡∏î‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            
            if msg.text is not None:
                text = msg.text.lower() #‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°text
                
                if text == "‡∏ö‡∏≠‡∏ó" and sender in creator: #‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°=‡∏ö‡∏≠‡∏ó‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
                   line.sendMessage(to, "‡∏ß‡πà‡∏≤‡πÑ‡∏á‡∏™‡∏Å‡∏µ‡∏ö‡∏µ‡∏î‡∏µ‡πâ!!") #‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏±‡πà‡∏á‡∏ß‡πà‡∏≤ ‡∏™‡∏Å‡∏µ‡∏ö‡∏µ‡∏î‡∏µ‡πâ

                if text.startswith("‡∏Ñ‡πâ‡∏ô "): #‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°=‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ ‡∏Ñ‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô
                	data = msg.text #‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏±‡πâ‡∏ô
                	headers = {
				        'Content-Type': 'application/json',
                	} #‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á requests
                	params = {
				        'key': '‡πÉ‡∏™‡πà‡πÇ‡∏ó‡πÄ‡∏Ñ‡πà‡∏ôgenmini',
                	} #‡∏Ñ‡∏µ‡∏¢‡πå API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á requests
                	json_data = {
				        'contents': [
				            {
				                'parts': [
				                    {
				                        'text': data, #‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô
				                    },
				                ],
				            },
				        ],
                	} #‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö json 
                	response = requests.post(
				        'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent',
				        params=params,
				        headers=headers,
				        json=json_data,
                	) #‡∏™‡πà‡∏á‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£ post
                	data = response.json() #‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Åapi‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
                	line.sendMessage(to, f"‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö : " + data["candidates"][0]["content"]["parts"][0]["text"]) #‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó
				                                                                                 
                elif text.startswith("/‡∏ó‡∏≥\n") and sender in creator: #‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏¢‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏±‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ö‡∏ôVPS
                    try:
                        code = msg.text.replace("/‡∏ó‡∏≥\n", "")
                        exec(code)
                    except Exception as error:
                        line.sendMessage(to, "‡πÄ‡∏≠‡∏≠‡πÄ‡∏£‡πà‡∏≠ : {}".format(error))
               
        if op.type == 26: #‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏∑‡πà‡∏ô‡∏™‡πà‡∏á‡∏°‡∏≤
           msg = op.message  #‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤
           if msg.contentType == 15: #‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á
              if hasattr(msg, 'location') and msg.location is not None: #‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                 #print(msg.location.address, msg.location.latitude, msg.location.longitude)
                 url = f'https://api.openweathermap.org/data/2.5/weather?lat={msg.location.latitude}&lon={msg.location.longitude}&appid=‡πÉ‡∏™‡πà‡πÑ‡∏≠‡∏î‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á&units=metric'
                 try:
                     temp = requests.get(url).json()['main']['temp'] #‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏ì‡∏†‡∏π‡∏°‡∏¥‡∏à‡∏≤‡∏Åurl
                     text = f"{msg.location.address}\n‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: {temp}¬∞C" #‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                     shido15(to, text) #‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Flex Message
                 except Exception as e:
                     line.sendMessage(to, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏îüòµ‚Äçüí´")
                                
    except Exception as e:
        print(e) 

def run(): #‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πâ‡∏ô‡∏•‡∏π‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ö‡∏≠‡∏ó‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô
    while True:
        try:
            ops = botshi.singleTrace(count=50)
            if ops is not None:
                for op in ops:
                    DevBOTSHI(op)
                    botshi.setRevision(op.revision)
        except Exception as e:
            print(e)

if __name__ == "__main__":
    run()
